tabla = ["-", "-", "-",
         "-", "-", "-",
         "-", "-", "-"]

# Lets us know if the game is over yet
corriendo = True

# Tells us who the winner is
ganador = False

# Tells us who the current player is (X goes first)
jugador = "O"

# ------------- Functions ---------------

# Play a game of tic tac toe
def Jugar():

  # Show the initial game board
  ver_tab()

  # Loop until the game stops (winner or tie)
  while corriendo:

    # Handle a turn
    turno(jugador)

    # Check if the game is over
    terminar()

    # Flip to the other player
    cambio ()
  
  # Since the game is over, print the winner or tie
  if ganador == "X" or ganador == "O":
    print(ganador + " gano.")
  elif ganador == False:
    print("Sin Ganador")


# Display the game board to the screen
def ver_tab():
  print("\n")
  print(tabla[6] + " | " + tabla[7] + " | " + tabla[8])
  print(tabla[3] + " | " + tabla[4] + " | " + tabla[5])
  print(tabla[0] + " | " + tabla[1] + " | " + tabla[2])
  print("\n")


# Handle a turn for an arbitrary player
def turno(jug):

  # Get position from player
  print("le toca a : " + jug )
  posicion = input("elige un numero de tu teclado de letras: ")

  # Whatever the user inputs, make sure it is a valid input, and the spot is open
  valid = False
  while not valid:

    # Make sure the input is valid
    while posicion not in ["7", "8", "9", "4", "5", "6", "1", "2", "3"]:
      posicion = input("numero invalido, elige dentro del rango:  ")
 
    # Get correct index in our board list
    posicion = int(posicion) - 1

    # Then also make sure the spot is available on the board
    if tabla[posicion] == "-":
      valid = True
    else:
      print("Puesto ocupado, busca otra posicion")

  # Put the game piece on the board
  tabla[posicion] = jug

  # Show the game board
  ver_tab()


# Check if the game is over
def terminar():
  ver_gan()
  ver_noga()


# Check to see if somebody has won
def ver_gan():
  # Set global variables
  global ganador
  # Check if there was a winner anywhere
  row_winner = check_rows()
  column_winner = check_columns()
  diagonal_winner = check_diagonals()
  # Get the winner
  if row_winner:
    ganador = row_winner
  elif column_winner:
    ganador = column_winner
  elif diagonal_winner:
    ganador = diagonal_winner
  else:
    ganador = False


# Check the rows for a win
def check_rows():
  # Set global variables
  global corriendo
  # Check if any of the rows have all the same value (and is not empty)
  row_1 = tabla[6] == tabla[7] == tabla[8] != "-"
  row_2 = tabla[3] == tabla[4] == tabla[5] != "-"
  row_3 = tabla[0] == tabla[1] == tabla[2] != "-"
  # If any row does have a match, flag that there is a win
  if row_1 or row_2 or row_3:
    corriendo = False
  # Return the winner
  if row_1:
    return tabla[6] 
  elif row_2:
    return tabla[3] 
  elif row_3:
    return tabla[0] 
  # Or return None if there was no winner
  else:
    return False


# Check the columns for a win
def check_columns():
  # Set global variables
  global corriendo
  # Check if any of the columns have all the same value (and is not empty)
  column_1 = tabla[6] == tabla[3] == tabla[0] != "-"
  column_2 = tabla[7] == tabla[4] == tabla[1] != "-"
  column_3 = tabla[8] == tabla[5] == tabla[2] != "-"
  # If any row does have a match, flag that there is a win
  if column_1 or column_2 or column_3:
    corriendo = False
  # Return the winner
  if column_1:
    return tabla[6] 
  elif column_2:
    return tabla[7] 
  elif column_3:
    return tabla[8] 
  # Or return None if there was no winner
  else:
    return False


# Check the diagonals for a win
def check_diagonals():
  # Set global variables
  global corriendo
  # Check if any of the columns have all the same value (and is not empty)
  diagonal_1 = tabla[6] == tabla[4] == tabla[2] != "-"
  diagonal_2 = tabla[8] == tabla[4] == tabla[0] != "-"
  # If any row does have a match, flag that there is a win
  if diagonal_1 or diagonal_2:
   corriendo = False
  # Return the winner
  if diagonal_1:
    return tabla[6] 
  elif diagonal_2:
    return tabla[8]
  # Or return None if there was no winner
  else:
    return False


# Check if there is a tie
def ver_noga():
  # Set global variables
  global corriendo
  # If board is full
  if "-" not in tabla:
    corriendo = False
    return True
  # Else there is no tie
  else:
    return False


# Flip the current player from X to O, or O to X
def cambio():
  # Global variables we need
  global jugador
  # If the current player was X, make it O
  if jugador == "O":
    jugador = "X"
  # Or if the current player was O, make it X
  elif jugador == "X":
   jugador = "O"
    

# ------------ Start Execution -------------
# Play a game of tic tac toe
Jugar()

 
